{"version":3,"sources":["ListItem.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ListItem","useState","currentToDo","setCurrentToDo","toDos","setToDos","useEffect","axios","get","then","res","data","HandleSubmit","e","a","preventDefault","alert","JSON","stringify","id","Date","getTime","value","status","post","console","log","catch","err","error","onSubmit","className","placeholder","type","onChange","target","map","toDo","defaultChecked","checked","put","updateToDo","onClick","filterToDo","filter","delete","deleteToDo","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAyHeA,MA1Gf,WAAoB,MAGsBC,mBAAS,IAH/B,mBAGTC,EAHS,KAGIC,EAHJ,OAIUF,mBAAiB,IAJ3B,mBAITG,EAJS,KAIFC,EAJE,KAOhBC,qBAAU,WACNC,IAAMC,IAAY,oCAAoCC,MAAK,SAACC,GACxDL,EAASK,EAAIC,WAElB,IAGH,IAMMC,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACjBD,EAAEE,iBACkB,KAAhBb,EACAc,MAAMC,KAAKC,UAAU,6BAGrBf,EAAe,IACfE,EAAS,GAAD,mBACDD,GADC,CAEJ,CACIe,IAfO,IAAIC,MACXC,UAeAC,MAAOpB,EACPqB,QAAQ,MAKhBhB,IAAMiB,KAAK,mCAAoC,CAC3CF,MAAOpB,EACPqB,QAAQ,IACTd,MAAK,SAAAC,GAAG,OAAIe,QAAQC,IAAIhB,MACtBiB,OAAO,SAAAC,GAAG,OAAIH,QAAQI,MAAMD,OArBpB,2CAAH,sDAqElB,OACI,gCACI,uBAAME,SAAU,SAACjB,GAAD,OAAOD,EAAaC,IAApC,UACI,uBAAOkB,UAAU,cACVC,YAAY,yBACZC,KAAK,OACLX,MAAOpB,EACPgC,SAAU,SAAArB,GAAC,OAAIV,EAAeU,EAAEsB,OAAOb,UAE9C,uBAPJ,IAOc,uBACV,wBAAQS,UAAU,aAAaE,KAAK,SAApC,qBAEJ,uBACA,oCA7BG7B,EAAMgC,KAAI,SAACC,GACd,OACI,sBAAmBN,UAAU,cAA7B,UACI,uBACOE,KAAK,WACLK,eAAgBD,EAAKd,OACrBW,SAAU,SAACrB,GAAD,OApBd,SAACwB,EAAYxB,GAE5BwB,EAAKd,OAASV,EAAEsB,OAAOI,QAGvBhC,IAAMiC,IAAI,oCAAoCH,EAAKlB,GAAI,CACnDG,MAAOe,EAAKf,MACZC,OAAQc,EAAKd,SACdd,MAAK,SAAAC,GAAG,OAAIe,QAAQC,IAAIhB,MACtBiB,OAAO,SAAAC,GAAG,OAAIH,QAAQI,MAAMD,MAWGa,CAAWJ,EAAMxB,MAEzC,sCAASwB,EAAKf,MAAd,eACA,wBAAQoB,QAAS,kBApCd,SAACvB,GAEhB,IAAMwB,EAA0BvC,EAAMwC,QAClC,SAACP,GAAD,OAAgBA,EAAKlB,KAAOA,KAChCd,EAASsC,GAGTpC,IAAMsC,OAAO,oCAAoC1B,GAC5CV,MAAK,SAAAC,GAAG,OAAIe,QAAQC,IAAIhB,MACxBiB,OAAO,SAAAC,GAAG,OAAIH,QAAQI,MAAMD,MA2BEkB,CAAWT,EAAKlB,KAAvC,sBACA,uBARJ,IAQc,yBARJkB,EAAKlB,OA2BnB,WCvGG4B,MAVf,WACE,OACE,sBAAKhB,UAAU,MAAf,UACG,2CACH,cAAC,EAAD,QCMWiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2617e765.chunk.js","sourcesContent":["import './List.scss';\nimport React from 'react';\nimport {ChangeEvent, useEffect, useState} from \"react\";\nimport axios, {AxiosResponse} from 'axios';\n\n// PascalCase - des composants React + Typescript, dossiers/stylesheets\n// camelCase - pour le reste\n// kebab-case pour des classes CSS\n\ninterface Item {\n    id: number;\n    value: string;\n    status: boolean,\n}\n\nfunction ListItem() {\n\n    // Use Hook useState()\n    const [currentToDo, setCurrentToDo] = useState('');\n    const [toDos, setToDos] = useState<Item[]>([]);\n\n    //Use Hook Effect and axios to get API\n    useEffect(() => {\n        axios.get<Item[]>('http://localhost:1337/todo-lists').then((res: AxiosResponse) => {\n            setToDos(res.data);\n        });\n    }, []);\n\n    //Use getTime() to get ID unique\n    const timeToDo = () => {\n        const date: Date = new Date();\n        return date.getTime();\n    }\n\n    //Add a new list\n    const HandleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (currentToDo === \"\") {\n            alert(JSON.stringify(\"Please write something!\"));\n        } else {\n            //Submit into Array\n            setCurrentToDo(\"\");\n            setToDos([\n                ...toDos,\n                {\n                    id: timeToDo(), //temporary\n                    value: currentToDo,\n                    status: false,\n                }\n            ])\n\n            //POST to API\n            axios.post('http://localhost:1337/todo-lists', {\n                value: currentToDo,\n                status: false,\n            }).then(res => console.log(res))\n                .catch((err => console.error(err)));\n        }\n    };\n\n    //use filter to create a new array without array[id]\n    const deleteToDo = (id: number) => {\n        //Delete in Array\n        const filterToDo: Array<Item> = toDos.filter(\n            (toDo: Item) => toDo.id !== id);\n        setToDos(filterToDo);\n\n        //Delete in API\n        axios.delete('http://localhost:1337/todo-lists/'+id)\n            .then(res => console.log(res))\n            .catch((err => console.error(err)));\n    }\n\n    // true - DONE , false - Not Done\n    const updateToDo = (toDo: Item, e: ChangeEvent<HTMLInputElement>) => {\n        //update in Array\n        toDo.status = e.target.checked;\n\n        //Update in API\n        axios.put('http://localhost:1337/todo-lists/'+toDo.id, {\n            value: toDo.value,\n            status: toDo.status,\n        }).then(res => console.log(res))\n            .catch((err => console.error(err)));\n    }\n\n    //Show the List\n    const renderToDos = () => {\n        return toDos.map((toDo: Item) => {\n            return (\n                <div key={toDo.id} className=\"list-bigger\">\n                    <input\n                           type=\"checkbox\"\n                           defaultChecked={toDo.status}\n                           onChange={(e) => updateToDo(toDo, e)}\n                    />\n                    <span>  {toDo.value} &nbsp;&nbsp;</span>\n                    <button onClick={() => deleteToDo(toDo.id)}> Delete </button>\n                    <br></br> <br></br>\n                </div>\n            )\n        })\n    }\n\n    return (\n        <div>\n            <form onSubmit={(e) => HandleSubmit(e)}>\n                <input className=\"form-bigger\"\n                       placeholder=\" What you need to do ?\"\n                       type=\"text\"\n                       value={currentToDo}\n                       onChange={e => setCurrentToDo(e.target.value)}\n                />\n                <br></br> <br></br>\n                <button className=\"btn-bigger\" type=\"submit\">Todo</button>\n            </form>\n            <br></br>\n            <section>{renderToDos()} </section>\n        </div>\n    );\n}\nexport default ListItem;\n\n","import React from 'react';\nimport './App.scss';\nimport ListItem from './ListItem';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <h1>Todo List</h1>\n    <ListItem />\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}